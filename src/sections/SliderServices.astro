---
// Interface pour les services
interface Service {
  name: string;
  description?: string;
  icon: string;
}

// Services par défaut avec des icônes Font Awesome
const defaultServices: Service[] = [
  {
    name: "Coupe classique",
    description: "Style impeccable",
    icon: "fa-scissors",
  },
  {
    name: "Coupe + shampoing",
    description: "Soin complet",
    icon: "fa-shower",
  },
  {
    name: "Taille de barbe",
    description: "Précision parfaite",
    icon: "fa-razor",
  },
  {
    name: "Contours",
    description: "Finition soignée",
    icon: "fa-scissors",
  },
  {
    name: "Serviette chaude",
    description: "Détente ultime",
    icon: "fa-hot-tub",
  },
  {
    name: "Soin de visage",
    description: "Exfoliation premium",
    icon: "fa-spa",
  },
];

// Props du composant
interface Props {
  services?: Service[];
  perPage?: number;
  speed?: number;
  className?: string;
}

const {
  services = defaultServices,
  perPage = 4,
  speed = 800,
  className = "",
} = Astro.props;
---

<section class={`slider-services ${className}`}>
  <div class="splide" role="group" aria-label="Services Slider">
    <div class="splide__track">
      <ul class="splide__list">
        {
          services.map((service) => (
            <li class="splide__slide">
              <div class="service-card">
                <div class="service-icon">
                  <i class={`fas ${service.icon}`} />
                </div>
                <div class="service-content">
                  <h3 class="service-title">{service.name}</h3>
                  {service.description && (
                    <p class="service-description">{service.description}</p>
                  )}
                </div>
              </div>
            </li>
          ))
        }
      </ul>
    </div>
  </div>
</section>

<link
  rel="stylesheet"
  href="https://cdn.jsdelivr.net/npm/@splidejs/splide@4.1.4/dist/css/splide.min.css"
/>

<style>
  .slider-services {
    width: 100%;
    background-color: #0a0a0a;
    padding: 0;
    overflow: hidden;
  }

  .service-card {
    display: flex;
    align-items: center;
    padding: 1rem;
    color: #ffffff;
    margin: 0 1.5rem; /* Ajout de marge horizontale */
  }

  .service-icon {
    width: 48px;
    height: 48px;
    border-radius: 50%;
    background-color: #262626;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-right: 16px;
    transition: background-color 0.3s ease;
  }

  .service-icon i {
    color: #ffffff;
    font-size: 18px;
  }

  .service-content {
    display: flex;
    flex-direction: column;
  }

  .service-title {
    color: #ffffff;
    font-weight: bold;
    font-size: 20px;
    line-height: 1.2;
    margin: 0;
  }

  .service-description {
    color: #9ca3af;
    font-size: 14px;
    margin: 4px 0 0 0;
  }

  /* Splide custom styles */
  :global(.splide__arrow) {
    background: rgba(255, 255, 255, 0.2);
  }

  :global(.splide__arrow svg) {
    fill: #ffffff;
  }

  :global(.splide__arrow:hover) {
    background: rgba(255, 255, 255, 0.4);
  }

  /* Ajout d'espace entre les slides */
  :global(.splide__slide) {
    padding: 0.5rem;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .service-icon {
      width: 40px;
      height: 40px;
    }

    .service-title {
      font-size: 16px;
    }

    .service-description {
      font-size: 12px;
    }
  }
</style>

<script
  src="https://cdn.jsdelivr.net/npm/@splidejs/splide@4.1.4/dist/js/splide.min.js"
></script>
<script
  src="https://cdn.jsdelivr.net/npm/@splidejs/splide-extension-auto-scroll@0.5.3/dist/js/splide-extension-auto-scroll.min.js"
></script>

<script define:vars={{ perPage, speed }}>
  document.addEventListener("DOMContentLoaded", function () {
    const splideElement = document.querySelector(".splide");
    if (splideElement) {
      new Splide(splideElement, {
        type: "loop",
        perPage: perPage,
        perMove: 1,
        gap: "3rem", // Augmentation de l'espace entre les slides
        arrows: false,
        pagination: false,
        autoScroll: {
          speed: speed / 10,
          pauseOnHover: true,
          pauseOnFocus: true,
        },
        breakpoints: {
          768: {
            perPage: 2,
            gap: "2rem", // Espace réduit sur tablette
          },
          480: {
            perPage: 1,
            gap: "1.5rem", // Espace encore plus réduit sur mobile
          },
        },
      }).mount(window.splide.Extensions);
    }
  });
</script>
