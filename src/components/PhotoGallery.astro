---
// Composant Galerie Photos

// R√©cup√©rer les images depuis l'API Cloudinary
let images: any[] = [];
let error = null;

try {
    // Ajouter un timeout de 5 secondes pour √©viter les blocages
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 5000);
    
    const response = await fetch(`${Astro.url.origin}/api/photos`, {
        signal: controller.signal
    });
    
    clearTimeout(timeoutId);
    
    if (!response.ok) {
        throw new Error(`Erreur HTTP: ${response.status}`);
    }
    
    const data = await response.json();
    
    if (data.success) {
        images = data.images;
    } else {
        error = data.error || 'Erreur lors de la r√©cup√©ration des images';
    }
} catch (err: any) {
    if (err.name === 'AbortError') {
        error = 'D√©lai d\'attente d√©pass√© - Connexion lente';
    } else if (err.message && err.message.includes('HTTP')) {
        error = 'Erreur de connexion au serveur';
    } else {
        error = 'Erreur de connexion au serveur';
    }
    console.error('Erreur lors de la r√©cup√©ration des images:', err);
}

// Images de fallback si aucune image Cloudinary n'est disponible
const fallbackImages = [
    {
        url: "/images/photo-gallery/1.webp",
        alt: "Salon de coiffure Neat Barber - Vue d'ensemble",
    },
    {
        url: "/images/photo-gallery/2.webp",
        alt: "Salon de coiffure Neat Barber - Espace de travail",
    },
    {
        url: "/images/photo-gallery/3.webp",
        alt: "Salon de coiffure Neat Barber - Ambiance salon",
    },
    {
        url: "/images/photo-gallery/4.webp",
        alt: "Salon de coiffure Neat Barber - Zone d'accueil",
    },
    {
        url: "/images/photo-gallery/5.webp",
        alt: "Salon de coiffure Neat Barber - D√©tails d'√©quipement",
    },
    {
        url: "/images/photo-gallery/6.webp",
        alt: "Salon de coiffure Neat Barber - Espace d√©tente",
    },
    {
        url: "/images/photo-gallery/7.webp",
        alt: "Salon de coiffure Neat Barber - Vue compl√®te",
    },
];

// Utiliser les images Cloudinary si disponibles, sinon les images de fallback
const displayImages = images.length > 0 ? images : fallbackImages;
---

<div class="photo-gallery">
  <div class="container-fluid">
    <div class="row">
      <div class="col-md-12">
        <!-- Section Title Start -->
        <div class="section-title">
          <h3 class="wow fadeInUp">Galerie Photos</h3>
          <h2 class="text-anime">D√©couvrez nos locaux</h2>
        </div>
        <!-- Section Title End -->
      </div>
    </div>

    <div class="row">
      <div class="col-md-12">
        {error && (
          <div class="alert alert-warning text-center mb-4">
            <p>‚ö†Ô∏è {error}</p>
            <p class="mb-0">Affichage des images par d√©faut.</p>
          </div>
        )}
        
        {displayImages.length === 0 ? (
          <div class="text-center py-5">
            <div class="no-photos-message">
              <h4>üì∏ Aucune photo disponible pour le moment</h4>
              <p>Notre galerie sera bient√¥t mise √† jour avec de nouvelles photos de notre salon.</p>
            </div>
          </div>
        ) : (
          <div class="photo-gallery-ticker">
            <!-- Photo Gallery Images Start -->
            <div class="photo-gallery-content">
              {displayImages.map((image: any) => (
                <div class="photo-gallery-item">
                  <figure class="hover-anime">
                    <img 
                      src={image.url} 
                      alt={image.alt} 
                      loading="lazy"
                      width={image.width || 400}
                      height={image.height || 300}
                    />
                  </figure>
                </div>
              ))}
            </div>

            <div class="photo-gallery-content">
              {displayImages.map((image: any) => (
                <div class="photo-gallery-item">
                  <figure class="hover-anime">
                    <img 
                      src={image.url} 
                      alt={image.alt} 
                      loading="lazy"
                      width={image.width || 400}
                      height={image.height || 300}
                    />
                  </figure>
                </div>
              ))}
            </div>
            <!-- Photo Gallery Images End -->
          </div>
        )}
      </div>
    </div>
  </div>
</div>
